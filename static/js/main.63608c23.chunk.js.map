{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVizualize/SortingVizualize.js","views/Root.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","PRIMARY_COLOR","SortingVizualize","props","state","resetArray","bind","this","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","onClick","mergeSort","className","map","value","idx","React","Component","Root","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.63608c23.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      animations.push([i, i]);\r\n      animations.push([i, i]);\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      animations.push([j, j]);\r\n      animations.push([j, j]);\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","import React from 'react';\r\nimport './SortingVizualize.css';\r\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport class SortingVizualize extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n        };\r\n        this.resetArray = this.resetArray.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        // I use this method to generate new array and reset\r\n        const array = [];\r\n        for (let i = 0; i < 100; i++) {\r\n            array.push(randomInt(5, 750)); // Min and Max value of number in array\r\n        }\r\n        this.setState({ array });\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { array } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <header>\r\n                    <nav>\r\n                        <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n                        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    </nav>\r\n                </header>\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                                backgroundColor: PRIMARY_COLOR,\r\n                                height: `${value}px`,\r\n                            }}></div>\r\n                    ))}\r\n                </div>\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n        if (arrayOne[i] !== arrayTwo[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport default SortingVizualize;","import { SortingVizualize } from '../SortingVizualize/SortingVizualize';\r\n\r\nfunction Root() {\r\n\r\n  return (\r\n    \r\n    <>\r\n      <div className=\"App\">\r\n        <SortingVizualize />\r\n      </div>\r\n    </>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default Root;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Root from './views/Root'\r\n\r\nReactDOM.render(<React.StrictMode> <Root /> </React.StrictMode>, document.getElementById('root'))"],"sourceRoot":""}