[{"C:\\Projekty\\Vizualize-Sorting\\client\\src\\index.js":"1","C:\\Projekty\\Vizualize-Sorting\\client\\src\\views\\Root.js":"2","C:\\Projekty\\Vizualize-Sorting\\client\\src\\SortingVizualize\\SortingVizualize.js":"3","C:\\Projekty\\Vizualize-Sorting\\client\\src\\sortingAlgorithms\\sortingAlgorithms.js":"4"},{"size":195,"mtime":1613062908548,"results":"5","hashOfConfig":"6"},{"size":241,"mtime":1613062921573,"results":"7","hashOfConfig":"6"},{"size":3523,"mtime":1613466033239,"results":"8","hashOfConfig":"6"},{"size":1722,"mtime":1613465426972,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"srafav",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projekty\\Vizualize-Sorting\\client\\src\\index.js",[],["20","21"],"C:\\Projekty\\Vizualize-Sorting\\client\\src\\views\\Root.js",[],"C:\\Projekty\\Vizualize-Sorting\\client\\src\\SortingVizualize\\SortingVizualize.js",["22","23"],"import React from 'react';\r\nimport './SortingVizualize.css';\r\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport class SortingVizualize extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n        };\r\n        this.resetArray = this.resetArray.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        // I use this method to generate new array and reset\r\n        const array = [];\r\n        for (let i = 0; i < 100; i++) {\r\n            array.push(randomInt(5, 750)); // Min and Max value of number in array\r\n        }\r\n        this.setState({ array });\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { array } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <header>\r\n                    <nav>\r\n                        <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n                        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    </nav>\r\n                </header>\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                                backgroundColor: PRIMARY_COLOR,\r\n                                height: `${value}px`,\r\n                            }}></div>\r\n                    ))}\r\n                </div>\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n        if (arrayOne[i] !== arrayTwo[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport default SortingVizualize;","C:\\Projekty\\Vizualize-Sorting\\client\\src\\sortingAlgorithms\\sortingAlgorithms.js",[],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":9,"column":7,"nodeType":"30","messageId":"31","endLine":9,"endColumn":27},{"ruleId":"28","severity":1,"message":"32","line":95,"column":10,"nodeType":"30","messageId":"31","endLine":95,"endColumn":24},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-unused-vars","'NUMBER_OF_ARRAY_BARS' is assigned a value but never used.","Identifier","unusedVar","'arraysAreEqual' is defined but never used.","no-global-assign","no-unsafe-negation"]